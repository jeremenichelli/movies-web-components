import router from '../../util/router.js';
import emitter from '../../util/emitter.js';
import collectRefs from 'web-component-refs';
import emptyNode from '../../util/emptyNode.js';

// components
import '../app-icon/app-icon.js';
import '../app-card/app-card.js';
import '../loading-bar/loading-bar.js';
import '../search-view/search-view.js';
import '../movie-box/movie-box.js';

// styles
import appStyles from './movies-app.less';
import globalStyles from './global.less';

// generate style tag for global css rules
const globalStyleTag = document.createElement('style');

// inject styles generated by css loader
globalStyleTag.textContent = globalStyles.toString();

const template = `
  <style>${ appStyles.toString() }</style>
  <loading-bar ref="loadingBar"></loading-bar>
  <header>
    <h1>Movies</h1>
    <div ref="subtitle"></div>
  </header>
  <main class="view" ref="view"></main>
`;

class MoviesApp extends HTMLElement {
  constructor() {
    super();

    this.attachShadow({ mode: 'open' });
    this.shadowRoot.innerHTML = template;

    // append global styles
    document.body.insertBefore(globalStyleTag, this);

    // create subtitles aot
    this.homeSubtitle = document.createElement('h2');
    this.homeSubtitle.textContent = 'Look up fast information about your favorite titles';

    this.movieSubtitle = document.createElement('h2');
    this.movieSubtitle.innerHTML = `
      <span class=${ appStyles.locals.back }>
        <app-icon type="back"></app-icon> Back to Search
    `;

    this.movieSubtitle.addEventListener('click', e => {
      router.navigate('/');
    });
  }

  connectedCallback() {
    // get refs
    collectRefs.call(this);

    // router config
    // movie route
    router.on('/movie/:id', (params) => {
      this.renderMovie(params.id);
    });

    // home route
    router.on('/', () => {
      this.renderHome();
    });

    // wild card route
    router.on('*', () => {
      this.renderHome();
    });

    // resolve current url
    router.resolve();

    // listen to events
    emitter.on('onloadingstarted', () => {
      this.refs.loadingBar.visible = true;
    });

    emitter.on('onloadingended', () => {
      this.refs.loadingBar.visible = false;
    });
  }

  renderHome() {
    emptyNode(this.refs.subtitle);
    emptyNode(this.refs.view);

    const searchView = document.createElement('search-view');

    this.refs.subtitle.insertBefore(this.homeSubtitle, null);
    this.refs.view.appendChild(searchView);
  }

  renderMovie(id) {
    this.refs.loadingBar.visible = true;

    emptyNode(this.refs.subtitle);
    emptyNode(this.refs.view);

    const movieElement = document.createElement('movie-box');
    movieElement.setAttribute('mid', id);

    this.refs.subtitle.insertBefore(this.movieSubtitle, null);
    this.refs.view.insertBefore(movieElement, null);
  }
}

window.customElements.define('movies-app', MoviesApp);
